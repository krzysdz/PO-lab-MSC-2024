#include "../gui/MainWindow.hpp"
#include <QTest>

namespace fs = std::filesystem;

class ImportExportTest : public QObject {
    Q_OBJECT

private:
private slots:
    void file_rw()
    {
        const fs::path path{ "Testing/rw_testfile" };
        std::vector<uint8_t> data
            = { 0xe2, 0x87, 0xf,  0xe2, 0xf1, 0x4c, 0x9e, 0xe6, 0xa0, 0x9a, 0x93, 0x9c, 0x92, 0xee,
                0xd4, 0xa3, 0x9f, 0xae, 0x6f, 0xe,  0x67, 0xaf, 0x9c, 0x19, 0xa8, 0x67, 0x11, 0x5f,
                0xe9, 0x1d, 0x91, 0x3,  0x18, 0xbf, 0xbb, 0xe3, 0x60, 0xb,  0xb5, 0xd,  0xb2, 0xd,
                0xfd, 0xc4, 0x55, 0xa4, 0x34, 0x1f, 0xfc, 0x87, 0xe1, 0x24, 0x77, 0x39, 0x64, 0x7b,
                0xa1, 0x77, 0xe1, 0xdf, 0x44, 0xd1, 0xf5, 0x5b, 0xf,  0x1c, 0x67, 0x53, 0x9d, 0x68,
                0x66, 0x99, 0xff, 0x11, 0xe,  0xbb, 0x91, 0x31, 0x45, 0xbc, 0xed, 0xfc, 0x8,  0x29,
                0x14, 0x56, 0xa2, 0x3c, 0xc9, 0xb5, 0x7b, 0xef, 0xd,  0xcd, 0x5d, 0x9d, 0x24, 0x38,
                0xab, 0xc,  0x42, 0x3,  0x89, 0x78, 0x29, 0x7a, 0x98, 0x86, 0xba, 0x7b, 0xd7, 0xc7,
                0x74, 0xf3, 0xea, 0xfb, 0x29, 0x2a, 0x2,  0x5,  0x9e, 0x59, 0xa1, 0x64, 0x51, 0x64,
                0xfa, 0xdf, 0x4e, 0xd5, 0x7c, 0x4c, 0xb9, 0x4f, 0xcb, 0x50, 0x5a, 0xdc, 0xcc, 0x14,
                0xf2, 0x88, 0x50, 0xfd, 0x40, 0x51, 0xf2, 0x70, 0xa3, 0x6a, 0x5d, 0x9b, 0xa4, 0xb0,
                0x2c, 0x78, 0xdf, 0x9,  0xde, 0xa2, 0x4c, 0x6f, 0xa4, 0xc1, 0x35, 0x4b, 0x29, 0x35,
                0xc5, 0x24, 0x73, 0x9e, 0x8f, 0x85, 0xc2, 0xa9, 0xf9, 0x6e, 0xcd, 0x5d, 0x5f, 0xc8,
                0x26, 0xa2, 0xfb, 0xd6, 0x58, 0xda, 0x62, 0x6a, 0x8f, 0x63, 0x30, 0xbe, 0xcd, 0x82,
                0x99, 0x12, 0x4,  0xc7, 0x6b, 0x25, 0x21, 0x84, 0x70, 0x8a, 0x9c, 0x80, 0x49, 0xed,
                0x3e, 0xf,  0x2a, 0x6d, 0xce, 0x54, 0x21, 0xf8, 0xd6, 0xc4, 0x80, 0x92, 0x8a, 0x47,
                0x90, 0xb0, 0x7,  0xd9, 0xc0, 0xc1, 0x54, 0x4e, 0x0,  0x61, 0x25, 0x40, 0x53, 0xd6,
                0xfe, 0xbe, 0x27, 0xc6, 0x81, 0x8a, 0x4c, 0x9c, 0x52, 0x21, 0x9c, 0xb9, 0x5b, 0x92,
                0x4,  0xee, 0x8e, 0xa0, 0xe7, 0xca, 0xcd, 0x11, 0xd2, 0x1d, 0x99, 0x17, 0xd7, 0xca,
                0x89, 0xa1, 0x2a, 0xd3, 0xc4, 0x3e, 0xa4, 0x29, 0x6c, 0x24, 0x3e, 0x33, 0x8f, 0x89,
                0x4f, 0x3b, 0x58, 0xb9, 0x69, 0x77, 0xce, 0xaa, 0xd,  0x18, 0x24, 0x60, 0x90, 0x7e,
                0xe8, 0xfd, 0x9b, 0x5,  0xa0, 0xf6, 0xc5, 0x81, 0x6f, 0x44, 0xd3, 0x26, 0x43, 0x4b,
                0x36, 0xf1, 0xaf, 0xe5, 0xcf, 0xac, 0x86, 0x6f, 0x60, 0x3f, 0xe0, 0x4d, 0xc8, 0x8e,
                0x82, 0xf7, 0x6a, 0xae, 0x43, 0x9d, 0x65, 0xdf, 0x5c, 0x6b, 0x7e, 0x88, 0xbc, 0x9d,
                0xc7, 0xfb, 0x75, 0x66, 0x3f, 0xb2, 0x88, 0xae, 0xca, 0x4a, 0xc2, 0xb4, 0xd7, 0x46,
                0xa0, 0xe2, 0x94, 0x3e, 0x8c, 0xd9, 0xaa, 0x9c, 0x31, 0x8,  0x15, 0x6,  0x92, 0xad,
                0xc4, 0x21, 0x25, 0x84, 0xd2, 0x8,  0x3,  0x64, 0xe8, 0xd5, 0xe0, 0xd7, 0x91, 0xaf,
                0x89, 0x93, 0xd,  0xd6, 0xa,  0xe7, 0x2c, 0x5c, 0x89, 0xc2, 0x8,  0x9f, 0x3c, 0x4b,
                0x71, 0x52, 0xf1, 0x7b, 0x69, 0x36, 0x25, 0x7,  0xe1, 0xda, 0x1b, 0x31, 0xb5, 0x97,
                0x6b, 0x28, 0xf1, 0x86, 0xae, 0x62, 0x9e, 0x91, 0x56, 0x5,  0x3e, 0x5c, 0x14, 0x47,
                0x89, 0x67, 0xd7, 0x41, 0xa3, 0x71, 0xa3, 0xa4, 0x16, 0xa1, 0xc4, 0xa2, 0xac, 0xfb,
                0x31, 0x5,  0xab, 0xd5, 0x7a, 0xef, 0x95, 0x35, 0x89, 0x4,  0x76, 0x47, 0x2e, 0xed,
                0x36, 0xc2, 0xeb, 0x8,  0xf6, 0x50, 0x84, 0xb4, 0x5e, 0x81, 0xe6, 0xbe, 0x16, 0x0,
                0x3f, 0x2,  0x25, 0x28, 0x13, 0x55, 0xe1, 0x6c, 0xd7, 0xe4, 0xa4, 0x55, 0xa1, 0x6f,
                0xe9, 0x32, 0xa6, 0x6e, 0x30, 0xf1, 0x8e, 0x90, 0x35, 0xe8, 0x91, 0xde, 0xf9, 0xf8,
                0x2c, 0xf1, 0x46, 0xc5, 0xb8, 0x6c, 0xea, 0x25, 0x63, 0x68, 0xf2, 0x77, 0x51, 0x6b,
                0x1a, 0x49, 0x5,  0x89, 0xf8, 0x1e, 0x30, 0x58, 0x6a, 0xc2, 0x49, 0x59, 0x95, 0xd8,
                0xb1, 0x5,  0x21, 0xbd, 0xec, 0x54, 0xa2, 0xbf, 0xb0, 0x98, 0x9c, 0x3b, 0x7a, 0x20,
                0xa7, 0x94, 0xf9, 0x1b, 0x11, 0xc0, 0xca, 0x75, 0x7d, 0xf2, 0x1,  0xe4, 0xe4, 0x21,
                0x62, 0x35, 0x65, 0xc3, 0xbc, 0x3e, 0xd8, 0x31, 0x6d, 0xee, 0x69, 0xe0, 0xe7, 0xb0,
                0x67, 0x2a, 0xb1, 0x69, 0xd3, 0xe6, 0x6c, 0x26, 0x4c, 0x51, 0x6a, 0x56, 0x7e, 0x8c,
                0xbf, 0x53, 0x57, 0x86, 0x42, 0x2d, 0x7c, 0x10, 0x5e, 0x9e, 0x23, 0x50, 0x80, 0x62,
                0xa9, 0xf1, 0xf9, 0xc1, 0x31, 0x7,  0xcd, 0xbd, 0x1f, 0x64, 0xd4, 0xa4 };
        MainWindow::write_file(path, data);
        const auto [read_data, file_size] = MainWindow::read_file(path);
        QCOMPARE_EQ(file_size, data.size());
        QVERIFY2(std::ranges::equal(std::span{ read_data.get(), file_size }, data),
                 "Data read from file is different from data which should be written.");
    }
    void import_generators()
    {
        auto source_gen = std::make_unique<GeneratorSinus>(
            std::make_unique<GeneratorProstokat>(std::make_unique<GeneratorBaza>(5.5, 0, 23), 2.4,
                                                 34, 0.75),
            0.64, 80, 78, 1200);
        GeneratorsConfig conf;
        conf.import(std::move(source_gen));
        QCOMPARE_EQ(conf.simulation_time, 0);
        QCOMPARE(conf.label_time->text(), QString{ "Simulation time: 0" });
        QCOMPARE_EQ(conf.combo_edit->isEnabled(), true);
        QCOMPARE_EQ(conf.button_edit->isEnabled(), true);
        QCOMPARE_EQ(conf.button_delete->isEnabled(), true);
        QCOMPARE_EQ(conf.button_simulate->isEnabled(), true);
        QCOMPARE_GT(conf.combo_add->count(), 1);
        QCOMPARE_EQ(conf.combo_edit->count(), 3);
        QCOMPARE(conf.combo_edit->itemData(0), QString{ "Base" });
        QCOMPARE(conf.combo_edit->itemData(1), QString{ "Rectangular" });
        QCOMPARE(conf.combo_edit->itemData(2), QString{ "Sine" });
        QCOMPARE_EQ(conf.combo_edit->currentIndex(), 2);
        QCOMPARE(conf.combo_edit->itemText(2), QString{ "Sine [A=0.64 T=80 <78-1200>]" });
    }
    void import_generators_base_only()
    {
        GeneratorsConfig conf;
        conf.import(std::make_unique<GeneratorBaza>());
        QCOMPARE(conf.label_time->text(), QString{ "Simulation time: 0" });
        QCOMPARE_EQ(conf.combo_edit->isEnabled(), true);
        QCOMPARE_EQ(conf.button_edit->isEnabled(), true);
        QCOMPARE_EQ(conf.button_delete->isEnabled(), false);
        QCOMPARE_EQ(conf.button_simulate->isEnabled(), true);
        QCOMPARE_GT(conf.combo_add->count(), 1);
        QCOMPARE_EQ(conf.combo_edit->count(), 1);
        QCOMPARE_EQ(conf.combo_edit->currentIndex(), 0);
        QCOMPARE(conf.combo_edit->itemData(0), QString{ "Base" });
        QCOMPARE(conf.combo_edit->itemText(0), QString{ "Base [V=0]" });
    }
    void import_loop()
    {
        using p = ObiektStatyczny::point;

        PętlaUAR loop;
        loop.push_back(std::make_unique<RegulatorPID>(0.5, 4.0, 2.5));
        auto inner_loop = std::make_unique<PętlaUAR>(false, -9.7);
        inner_loop->push_back(std::make_unique<ObiektStatyczny>(p{ -3, -5 }));
        loop.push_back(std::move(inner_loop));
        loop.push_back(
            std::make_unique<ModelARX>(std::vector{ 1.0, 2.0 }, std::vector{ 0.5, -4.26 }, 2));

        MainWindow main_window;
        // Don't forget to initialize the UI before using it
        main_window.setup_ui();

        main_window.replace_loop(std::move(loop));

        const QModelIndex root_idx = main_window.tree_view->model()->index(0, 0);
        QCOMPARE(main_window.tree_view->model()->data(root_idx), QString{ "PętlaUAR" });
        QCOMPARE_EQ(main_window.tree_view->isExpanded(root_idx), true);

        const QModelIndex row_1 = main_window.tree_view->indexBelow(root_idx);
        QCOMPARE(main_window.tree_view->model()->data(row_1), QString{ "RegulatorPID" });
        QCOMPARE(row_1.parent(), root_idx);

        const QModelIndex row_2 = main_window.tree_view->indexBelow(row_1);
        QCOMPARE(main_window.tree_view->model()->data(row_2), QString{ "PętlaUAR" });
        QCOMPARE_EQ(main_window.tree_view->isExpanded(row_2), true);
        QCOMPARE(row_2.parent(), root_idx);

        const QModelIndex row_3 = main_window.tree_view->indexBelow(row_2);
        QCOMPARE(main_window.tree_view->model()->data(row_3), QString{ "ObiektStatyczny" });
        QCOMPARE(row_3.parent(), row_2);

        const QModelIndex row_4 = main_window.tree_view->indexBelow(row_3);
        QCOMPARE(main_window.tree_view->model()->data(row_4), QString{ "ModelARX" });
        QCOMPARE(row_4.parent(), root_idx);
    }
};

QTEST_MAIN(ImportExportTest)
#include "import_export_test.moc"
